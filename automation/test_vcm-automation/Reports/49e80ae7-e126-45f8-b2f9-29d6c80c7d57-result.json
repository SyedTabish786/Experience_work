{"status": "broken", "attachments": [{"source": "f0a12d3b-52be-4ec9-a8bd-c501c9dc1408-attachment.png", "type": "image/png", "name": "Dropdown List Closure  Assertion is Failed"}, {"source": "88be70ee-c152-478a-965c-1ab0fe11522c-attachment.png", "type": "image/png", "name": "Add Continue Button Assertion is Failed"}, {"source": "9761159e-969a-4c9e-b8b5-3532f651ae08-attachment.txt", "type": "text/plain", "name": "stdout"}], "labels": [{"name": "severity", "value": "normal"}, {"name": "suite", "value": "test_vcm_user_management_page"}, {"name": "subSuite", "value": "vcm_user_managementPage"}, {"name": "parentSuite", "value": "test_Scripts"}, {"name": "host", "value": "usas-MBP"}, {"name": "thread", "value": "2181-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "test_Scripts.test_vcm_user_management_page"}], "stop": 1587307468807, "uuid": "e64e4de5-2e4d-4042-92ec-db693ff8be4c", "historyId": "b65228842cf2ebda435759ceb7de3e94", "testCaseId": "98b227c94c2fa8b203709b48f2cec1a6", "start": 1587307388414, "fullName": "test_Scripts.test_vcm_user_management_page.vcm_user_managementPage#test_user_management_flow", "statusDetails": {"message": "TimeoutException: Message:", "trace": "self = <test_vcm_user_management_page.vcm_user_managementPage testMethod=test_user_management_flow>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_user_management_flow(self):\n        driver = self.driver\n        driver.implicitly_wait(50)\n        # self.driver.get(\"http://167.172.129.57/login?redirect=%2F\")\n        self.driver.get(\"http://157.230.179.140/login?redirect=%2F\")\n    \n        expected_title = \"Value Chain Management System\"\n    \n        try:\n            if driver.title == expected_title:\n                print(\"Home Page loaded successfully\")\n                self.assertEqual(driver.title, expected_title)\n        except Exception as a:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Test login screen title assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\" Home Page Title Assertion Failed Due To : \" + str(a))\n            self.driver.set_page_load_timeout(10)\n    \n        home = Home(driver)\n    \n        try:\n            if home.drop_menu.text == \"login\":\n                self.assertEqual(home.drop_menu.text, \"login\")\n                print(\"Login DropDown Assertion is Passed\")\n                home.drop_menu.click()\n        except Exception as b:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Dropdown Box  Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Login DropDown Assertion Failed Due TO :\" + str(b))\n    \n    \n        log_in = login(driver)\n        try:\n            if (log_in.user_name.get_attribute(\"id\") == \"username\"):\n                print(\"User Name Field Assertion is Passed\")\n                self.assertEqual(log_in.user_name.get_attribute(\"id\"), \"username\")\n                log_in.user_name.send_keys(\"admin.super\")\n        except Exception as c:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"UserName Text Field Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"User Name Field Assertion Failed Due To : \" + str(c))\n        try:\n            if (log_in.password.get_attribute(\"id\") == \"password\"):\n                print(\"Password Field Assertion is Passed\")\n                self.assertEqual(log_in.password.get_attribute(\"id\"), \"password\")\n                log_in.password.send_keys(\"conor\")\n        except Exception as d:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Password Text Field Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Password Field Assertion Failed Due To : \" + str(d))\n    \n        try:\n            if (log_in.submit_button.text == \"Login\"):\n                print(\"Login Button Assertion is Passed\")\n                self.assertEqual(log_in.submit_button.text, \"Login\")\n                log_in.submit_button.click()\n        except Exception as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Button  Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Login Button Assertion is Failed Due To:\" + str(e))\n    \n        user = user_management(driver)\n        try:\n            if (user.user_management_icon.text == \"supervisor_account\"):\n                print(\"User Management Icon Assertion is Passed\")\n                self.assertEqual(user.user_management_icon.text, \"supervisor_account\")\n                user.user_management_icon.click()\n    \n    \n    \n        except Exception as f:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"User Management Module Selection Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"User Management Icon Assertion Failed Due To :\" + str(f))\n        log = AppRole(driver)\n        try:\n            if (log.application_role.text == \"Application Role\"):\n                print(\"Application Role  Assertion is Passed\")\n                self.assertEqual(log.application_role.text, \"Application Role\")\n                log.application_role.click()\n        except Exception as g:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"User Management Application Role Selection Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Application Role Assertion is Failed Due To : \" + str(g))\n    \n        role = Add_App_Role(driver)\n        try:\n            if (role.Add_AppROle.text == \"Add New\\nadd\"):\n                print(\"Add Application-Role Assertion is passed\")\n                self.assertEqual(role.Add_AppROle.text, \"Add New\\nadd\")\n                role.Add_AppROle.click()\n    \n    \n        except Exception as h:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"User Management Application Role Add Role Button Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n    \n            print(\"Add Application-Role Assertion is Failed Due TO : \" + str(h))\n    \n        dropdown = add_dropdown(driver)\n        try:\n            if (dropdown.add_dropdown.get_attribute(\"id\") == \"moduleIds\"):\n                print(\"Application Module Selection DropDown Assertion is Passed\")\n                self.assertEqual(dropdown.add_dropdown.get_attribute(\"id\"), \"moduleIds\")\n                dropdown.add_dropdown.click()\n    \n        except Exception as i:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Application Module Selection DropDown Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Application Module Selection DropDown Assertion is Failed Due To : \" + str(i))\n        value1 = dropdown_value1(driver)\n        try:\n            if (value1.value1.text == \"Vendor Compliance\"):\n                print(\"Selection of Value one from Dropdown list Assertion is Passed\")\n                self.assertEqual(value1.value1.text, \"Vendor Compliance\")\n                value1.value1.click()\n    \n        except Exception as j:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Selection of Value one from Dropdown list Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n    \n            print(\"Selection of Value one from Dropdown list Assertion is Failed Due To : \" + str(j))\n    \n        value2 = dropdown_value2(driver)\n        try:\n            if (value2.value2.text == \"Meeting Management\"):\n                print(\"Selection of Value Two from Dropdown list Assertion is Passed\")\n                self.assertEqual(value2.value2.text, \"Meeting Management\")\n                value2.value2.click()\n    \n        except Exception as k:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Selection of Value Two from Dropdown list Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Selection of Value Two from Dropdown list Assertion is Failed Due To :\" + str(k))\n        value3 = dropdown_value3(driver)\n        try:\n            if (value3.value3.text == \"Change Management\"):\n                print(\"Selection of Value Three from Dropdown list Assertion is Passed\")\n                self.assertEqual(value3.value3.text, \"Change Management\")\n                value3.value3.click()\n    \n        except Exception as l:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Selection of Value Three from Dropdown list Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Selection of Value Three from Dropdown list Assertion is Failed Due To :\" + str(l))\n    \n        closure = dropdown_closure(driver)\n        try:\n            if (closure.closure.get_attribute(\"class\") == \"v-input__append-inner\"):\n                print(\"Dropdown list Closure Assertion is Passed \")\n                self.assertEqual(closure.closure.get_attribute(\"class\"), \"v-input__append-inner\")\n                closure.closure.click()\n    \n        except Exception as m:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Dropdown List Closure  Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Dropdown list Closure Assertion is Failed Due To :  \" + str(m))\n        data = details(driver)\n        try:\n            if (data.name.get_attribute(\"id\") == \"name\"):\n                print(\"Add Name Field Assertion is Passed\")\n                self.assertEqual(data.name.get_attribute(\"id\"), \"name\")\n                data.name.send_keys(\"Automation User\")\n    \n        except Exception as n:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Name Field  Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Add Name Field Assertion is Failed Due To : \" + str(n))\n    \n        desc = descrp(driver)\n        try:\n            if (desc.description.get_attribute(\"id\") == \"description\"):\n                print(\"Add Description Field Assertion is Passed\")\n                self.assertEqual(desc.description.get_attribute(\"id\"), \"description\")\n                desc.description.send_keys(\"Tester\")\n        except Exception as o:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Description Field Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Add Description Field Assertion is Failed Due To : \" + str(o))\n        contin = conti(driver)\n        try:\n            if (contin.contnue.text == \"Continue\\narrow_forward\"):\n                print(\"Add Continue Assertion is Passed\")\n                self.assertEqual(contin.contnue.text, \"Continue\\narrow_forward\")\n                contin.contnue.click()\n    \n        except Exception as o:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Continue Button Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Add Continue Assertion is Failed Due To : \" + str(o))\n        srch = sear(driver)\n        try:\n            if (srch.search.get_attribute(\"id\") == \"search\"):\n                print(\"Add Keyword Search Field Assertion is Passed\")\n                self.assertEqual(srch.search.get_attribute(\"id\"), \"search\")\n                srch.search.click()\n                srch.search.send_keys(\"Compliance\")\n    \n        except Exception as p:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Add Keyword Search Field Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Add Keyword Search Field Assertion is Failed Due To : \" + str(p))\n    \n        option1 = dropdown_option1(driver)\n        try:\n            if (option1.option1.text == \"Vendor Compliance\"):\n                print(\"Vendor Compliance Option Assertion is Passed\")\n                self.assertEqual(option1.option1.text, \"Vendor Compliance\")\n                option1.option1.click()\n    \n        except Exception as q:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vendor Compliance Option Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Vendor Compliance Option Assertion is Failed Due To : \" + str(q))\n        select_option1 = selc_option1(driver)\n        try:\n            if (select_option1.selection1.text == \"check_box_outline_blank\"):\n                print(\"Vendor Compliance Option Selection Assertion is Passed\")\n                self.assertEqual(select_option1.selection1.text, \"check_box_outline_blank\")\n                select_option1.selection1.click()\n    \n        except Exception as r:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Vendor Compliance Option Selection Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Vendor Compliance Option Selection Assertion is Failed Due To : \" + str(r))\n    \n        clear = clear_src_field(driver)\n        try:\n            if (clear.clear_field.get_attribute(\"class\") == \"v-input__icon v-input__icon--clear\"):\n                print(\"Keyword Search Field Clear Assertion is Passed\")\n                self.assertEqual(clear.clear_field.get_attribute(\"class\"), \"v-input__icon v-input__icon--clear\")\n                clear.clear_field.click()\n    \n        except Exception as s:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Keyword Search Field Clear Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Keyword Search Field Clear Assertion is Failed Due To: \" + str(s))\n        option2 = dropdown_option2(driver)\n        srch.search.click()\n        srch.search.send_keys(\"Meeting\")\n        try:\n    \n            if (option2.option2.text == \"Meeting Management\"):\n                print(\"Meeting Management Option Selection Assertion is Passed\")\n                self.assertEqual(option2.option2.text, \"Meeting Management\")\n                option2.option2.click()\n    \n        except Exception as t:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Meeting Management Option Selection Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Meeting Management Option Selection Assertion is Failed Due To : \" + str(t))\n    \n        select_option2 = selc_option2(driver)\n        try:\n            if (select_option2.selection2.text == \"check_box_outline_blank\"):\n                print(\"Meeting Managemeent Selection Assertion is Passed\")\n                self.assertEqual(select_option2.selection2.text, \"check_box_outline_blank\")\n                select_option2.selection2.click()\n    \n        except Exception as u:\n            allure.attach(self.driver.get_screenshot_as_png(),\n                          name=\"Meeting Management Selection Assertion is Failed\",\n                          attachment_type=AttachmentType.PNG)\n            print(\"Meeting Management Selection Assertion is Failed Due To :\" + str(u))\n        try:\n            clear.clear_field.click()\n        except (StaleElementReferenceException)as e:\n            self.clear_field = driver.find_element(By.XPATH, locator.clear_search)\n            self.clear_field.click()\n            print(str(e))\n    \n>       option3 = dropdown_option3(driver)\n\ntest_Scripts/test_vcm_user_management_page.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTests/test_pageobjects/test_pages/test_management_page.py:126: in __init__\n    self.option3= wait.until(EC.element_to_be_clickable((By.XPATH, locator.permission_option3)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2e07171ef4104a64b518d3f2108ff7b1\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x10d22b590>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       TimeoutException: Message:\n\n/Library/Python/2.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException"}, "name": "test_user_management_flow"}